// Embeds the (public) Supabase Functions base URL into a generated TS module
// so the packaged production builds know where to call even when runtime env vars
// are not present on end-user machines.
// Safe to embed: Functions URL is not a secret.

const fs = require('fs');
const path = require('path');
try { require('dotenv').config(); } catch {}

let url = process.env.SUPABASE_FUNCTIONS_URL || '';
if (!url) {
  if (fs.existsSync('.env')) {
    // Try manual parse as fallback (already attempted dotenv, but just in case)
    const envText = fs.readFileSync('.env', 'utf8');
    const line = envText.split(/\r?\n/).find(l => l.startsWith('SUPABASE_FUNCTIONS_URL='));
    if (line) url = line.split('=')[1].trim();
  }
}

if (!url) {
  if (process.env.CI || process.env.GITHUB_ACTIONS) {
    console.error('[embed-supabase-url] ERROR: SUPABASE_FUNCTIONS_URL not provided during CI build. Failing to avoid blank production config.');
    process.exit(1);
  } else {
    console.warn('[embed-supabase-url] WARNING: SUPABASE_FUNCTIONS_URL missing; generated file will contain empty string (dev only).');
  }
}

const outPath = path.join(__dirname, '..', 'src', 'main', 'generatedConfig.ts');
const contents = `// AUTO-GENERATED by scripts/embed-supabase-url.js\nexport const embedded = { supabaseFunctionsUrl: '${(url || '').replace(/'/g, "\\'")}' };\n`;
fs.writeFileSync(outPath, contents, 'utf8');
console.log('[embed-supabase-url] embedded SUPABASE_FUNCTIONS_URL:', url ? url : '(empty)');
